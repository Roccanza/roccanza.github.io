<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Organizzatore di Note Libri</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #0f1419 0%, #1a2332 50%, #243447 100%);
            min-height: 100vh;
            padding: 20px;
            color: #e2e8f0;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: rgba(15, 23, 42, 0.95);
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.4);
            overflow: hidden;
            backdrop-filter: blur(20px);
            border: 1px solid rgba(59, 130, 246, 0.1);
        }

        .header {
            background: linear-gradient(135deg, #1e3a8a 0%, #3730a3 50%, #1e40af 100%);
            color: white;
            padding: 30px;
            text-align: center;
            position: relative;
            overflow: hidden;
        }

        .header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(45deg, transparent 30%, rgba(255,255,255,0.1) 50%, transparent 70%);
            animation: shimmer 3s infinite;
        }

        @keyframes shimmer {
            0% { transform: translateX(-100%); }
            100% { transform: translateX(100%); }
        }

        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);
            position: relative;
            z-index: 1;
        }

        .header p {
            font-size: 1.1em;
            opacity: 0.9;
            position: relative;
            z-index: 1;
        }

        .main-content {
            padding: 30px;
            background: rgba(15, 23, 42, 0.6);
        }

        .upload-section {
            background: linear-gradient(135deg, #1e40af 0%, #3730a3 50%, #4338ca 100%);
            border-radius: 15px;
            padding: 30px;
            margin-bottom: 30px;
            text-align: center;
            color: white;
            position: relative;
            overflow: hidden;
        }

        .upload-section::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
            animation: rotate 6s linear infinite;
        }

        @keyframes rotate {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }

        .file-input {
            display: none;
        }

        .upload-btn {
            background: rgba(255, 255, 255, 0.15);
            border: 2px dashed rgba(255, 255, 255, 0.3);
            border-radius: 10px;
            padding: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-block;
            margin: 10px;
            position: relative;
            z-index: 1;
            backdrop-filter: blur(10px);
        }

        .upload-btn:hover {
            background: rgba(255, 255, 255, 0.25);
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(59, 130, 246, 0.3);
        }

        .upload-btn i {
            font-size: 2em;
            margin-bottom: 10px;
            display: block;
        }

        .books-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .book-card {
            background: linear-gradient(135deg, #1e293b 0%, #334155 100%);
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
            transition: all 0.3s ease;
            cursor: pointer;
            border-left: 5px solid #3b82f6;
            border: 1px solid rgba(59, 130, 246, 0.2);
        }

        .book-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 40px rgba(59, 130, 246, 0.2);
            border-color: rgba(59, 130, 246, 0.4);
            background: linear-gradient(135deg, #334155 0%, #475569 100%);
        }

        .book-title {
            font-size: 1.3em;
            font-weight: bold;
            margin-bottom: 5px;
            color: #f1f5f9;
        }

        .book-author {
            font-size: 1em;
            color: #94a3b8;
            font-style: italic;
            margin-bottom: 10px;
        }

        .book-stats {
            display: flex;
            justify-content: space-between;
            margin-top: 15px;
            font-size: 0.9em;
            color: #64748b;
        }

        .color-indicators {
            display: flex;
            gap: 5px;
            margin-top: 10px;
        }

        .color-dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            border: 2px solid rgba(59, 130, 246, 0.3);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        }

        .book-detail {
            display: none;
            animation: fadeIn 0.5s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .book-header {
            background: linear-gradient(135deg, #1e3a8a 0%, #3730a3 50%, #1e40af 100%);
            color: white;
            padding: 30px;
            border-radius: 15px;
            margin-bottom: 30px;
            position: relative;
            overflow: hidden;
        }

        .book-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(45deg, transparent 30%, rgba(255,255,255,0.1) 50%, transparent 70%);
            animation: shimmer 4s infinite;
        }

        .book-header-content {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            gap: 20px;
            position: relative;
            z-index: 1;
        }

        .book-info {
            flex: 1;
        }

        .book-actions {
            display: flex;
            gap: 10px;
        }

        .back-btn, .add-general-note-btn {
            background: rgba(255, 255, 255, 0.15);
            border: none;
            color: white;
            padding: 10px 20px;
            border-radius: 25px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 0.9em;
            backdrop-filter: blur(10px);
        }

        .back-btn:hover, .add-general-note-btn:hover {
            background: rgba(255, 255, 255, 0.25);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(59, 130, 246, 0.3);
        }

        .author-input-section {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            padding: 15px;
            margin-top: 15px;
            backdrop-filter: blur(10px);
        }

        .author-input {
            width: 100%;
            padding: 10px;
            border: none;
            border-radius: 5px;
            background: rgba(255, 255, 255, 0.9);
            margin-bottom: 10px;
            color: #1e293b;
        }

        .save-author-btn {
            background: rgba(255, 255, 255, 0.2);
            border: none;
            color: white;
            padding: 8px 16px;
            border-radius: 15px;
            cursor: pointer;
            font-size: 0.9em;
            transition: all 0.3s ease;
        }

        .save-author-btn:hover {
            background: rgba(255, 255, 255, 0.3);
        }

        .general-note-section {
            background: linear-gradient(135deg, #0f2027 0%, #203a43 50%, #2c5364 100%);
            border: 2px solid #3b82f6;
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 30px;
            box-shadow: 0 5px 20px rgba(59, 130, 246, 0.2);
        }

        .general-note-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .general-note-title {
            font-weight: bold;
            color: #60a5fa;
            font-size: 1.2em;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .general-note-content {
            color: #cbd5e1;
            line-height: 1.6;
            white-space: pre-wrap;
        }

        .filters {
            display: flex;
            gap: 10px;
            margin-bottom: 30px;
            flex-wrap: wrap;
        }

        .filter-btn {
            padding: 10px 20px;
            border: none;
            border-radius: 25px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 8px;
            backdrop-filter: blur(10px);
        }

        .filter-btn.active {
            transform: scale(1.05);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }

        .annotation {
            background: linear-gradient(135deg, #1e293b 0%, #334155 100%);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.3);
            transition: all 0.3s ease;
            border-left: 5px solid #64748b;
            border: 1px solid rgba(59, 130, 246, 0.1);
        }

        .annotation:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.4);
            border-color: rgba(59, 130, 246, 0.3);
        }

        .annotation-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .annotation-title {
            font-weight: bold;
            font-size: 1.1em;
            color: #f1f5f9;
        }

        .add-note-btn {
            background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
            border: none;
            color: white;
            padding: 8px 16px;
            border-radius: 15px;
            cursor: pointer;
            font-size: 0.9em;
            transition: all 0.3s ease;
        }

        .add-note-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(59, 130, 246, 0.4);
        }

        .highlight {
            font-family: Georgia, serif;
            font-size: 1.1em;
            line-height: 1.6;
            color: #e2e8f0;
            position: relative;
            padding: 15px;
            background: rgba(15, 23, 42, 0.6);
            border-radius: 10px;
            margin-bottom: 10px;
            border: 1px solid rgba(59, 130, 246, 0.2);
        }

        .highlight:before {
            content: """;
            font-size: 2em;
            color: #475569;
            position: absolute;
            top: -10px;
            left: 10px;
        }

        .note {
            background: linear-gradient(135deg, #451a03 0%, #78350f 50%, #92400e 100%);
            border: 1px solid #f59e0b;
            border-radius: 10px;
            padding: 15px;
            margin-top: 15px;
            color: #fbbf24;
            box-shadow: 0 3px 10px rgba(245, 158, 11, 0.2);
        }

        .note-label {
            font-weight: bold;
            font-size: 0.9em;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-bottom: 8px;
            color: #fcd34d;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .note-content {
            font-style: italic;
            line-height: 1.5;
        }

        .user-note {
            background: linear-gradient(135deg, #0c1f3d 0%, #1e3a8a 50%, #3730a3 100%);
            border: 1px solid #3b82f6;
            border-radius: 10px;
            padding: 15px;
            margin-top: 15px;
            color: #93c5fd;
            box-shadow: 0 3px 10px rgba(59, 130, 246, 0.2);
        }

        .user-note-label {
            font-weight: bold;
            font-size: 0.9em;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-bottom: 8px;
            color: #60a5fa;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .user-note-content {
            font-style: italic;
            line-height: 1.5;
            white-space: pre-wrap;
        }

        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #64748b;
        }

        .empty-state i {
            font-size: 4em;
            margin-bottom: 20px;
            color: #475569;
        }

        /* Modal Styles */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            animation: fadeIn 0.3s ease;
            backdrop-filter: blur(5px);
        }

        .modal {
            background: linear-gradient(135deg, #1e293b 0%, #334155 100%);
            border-radius: 15px;
            padding: 30px;
            max-width: 500px;
            width: 90%;
            max-height: 80vh;
            overflow-y: auto;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.5);
            border: 1px solid rgba(59, 130, 246, 0.3);
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 2px solid rgba(59, 130, 246, 0.2);
        }

        .modal-title {
            font-size: 1.4em;
            font-weight: bold;
            color: #f1f5f9;
        }

        .close-btn {
            background: none;
            border: none;
            font-size: 1.5em;
            cursor: pointer;
            color: #64748b;
            padding: 5px;
            border-radius: 50%;
            transition: all 0.3s ease;
        }

        .close-btn:hover {
            background: rgba(59, 130, 246, 0.2);
            color: #f1f5f9;
        }

        .modal-textarea {
            width: 100%;
            min-height: 150px;
            padding: 15px;
            border: 2px solid rgba(59, 130, 246, 0.3);
            border-radius: 10px;
            font-family: inherit;
            font-size: 1em;
            line-height: 1.5;
            resize: vertical;
            margin-bottom: 20px;
            background: rgba(15, 23, 42, 0.8);
            color: #e2e8f0;
        }

        .modal-textarea:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 10px rgba(59, 130, 246, 0.3);
        }

        .modal-actions {
            display: flex;
            gap: 10px;
            justify-content: flex-end;
        }

        .modal-btn {
            padding: 12px 24px;
            border: none;
            border-radius: 25px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .modal-btn.primary {
            background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
            color: white;
        }

        .modal-btn.secondary {
            background: rgba(100, 116, 139, 0.2);
            color: #94a3b8;
            border: 1px solid rgba(100, 116, 139, 0.3);
        }

        .modal-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }

        @media (max-width: 768px) {
            .container {
                margin: 10px;
                border-radius: 15px;
            }
            
            .header h1 {
                font-size: 2em;
            }
            
            .books-grid {
                grid-template-columns: 1fr;
            }
            
            .filters {
                justify-content: center;
            }

            .book-header-content {
                flex-direction: column;
                gap: 10px;
            }

            .book-actions {
                width: 100%;
                justify-content: center;
            }
        }
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>
<body>
    <div class="container">
        <div class="header">
            <h1><i class="fas fa-book-open"></i> Organizzatore di Note</h1>
            <p>Organizza e filtra le tue note di lettura per colore e libro</p>
        </div>

        <div class="main-content">
            <!-- Vista principale con lista libri -->
            <div id="books-view">
                <div class="upload-section">
                    <h2><i class="fas fa-cloud-upload-alt"></i> Carica un nuovo libro</h2>
                    <p>Seleziona un file HTML con le tue note ed evidenziazioni</p>
                    <label for="file-input" class="upload-btn">
                        <i class="fas fa-file-upload"></i>
                        <span>Scegli file HTML</span>
                    </label>
                    <input type="file" id="file-input" class="file-input" accept=".html" multiple>
                </div>

                <div id="books-container">
                    <div class="books-grid" id="books-grid"></div>
                </div>

                <div id="empty-state" class="empty-state">
                    <i class="fas fa-book"></i>
                    <h3>Nessun libro caricato</h3>
                    <p>Carica il tuo primo file HTML per iniziare a organizzare le tue note</p>
                </div>
            </div>

            <!-- Vista dettaglio libro -->
            <div id="book-detail" class="book-detail">
                <div class="book-header">
                    <div class="book-header-content">
                        <div class="book-info">
                            <button class="back-btn" onclick="showBooksView()">
                                <i class="fas fa-arrow-left"></i> Torna ai libri
                            </button>
                            <h2 id="detail-title"></h2>
                            <div id="detail-author"></div>
                            <div id="detail-stats"></div>
                            <div id="author-input-section" class="author-input-section" style="display: none;">
                                <input type="text" id="author-input" class="author-input" placeholder="Inserisci l'autore del libro...">
                                <button class="save-author-btn" onclick="saveAuthor()">
                                    <i class="fas fa-save"></i> Salva Autore
                                </button>
                            </div>
                        </div>
                        <div class="book-actions">
                            <button class="add-general-note-btn" onclick="showAddGeneralNoteModal()">
                                <i class="fas fa-plus"></i> Nota Generale
                            </button>
                        </div>
                    </div>
                </div>

                <div id="general-note-section"></div>

                <div class="filters" id="color-filters"></div>
                
                <div id="annotations-container"></div>
            </div>
        </div>
    </div>

    <!-- Modal per aggiungere note -->
    <div id="modal-overlay" class="modal-overlay" style="display: none;">
        <div class="modal">
            <div class="modal-header">
                <h3 class="modal-title" id="modal-title">Aggiungi Nota</h3>
                <button class="close-btn" onclick="closeModal()">&times;</button>
            </div>
            <textarea id="modal-textarea" class="modal-textarea" placeholder="Scrivi la tua nota qui..."></textarea>
            <div class="modal-actions">
                <button class="modal-btn secondary" onclick="closeModal()">Annulla</button>
                <button class="modal-btn primary" onclick="saveNote()">Salva Nota</button>
            </div>
        </div>
    </div>

    <script>
        let books = [];
        let currentBook = null;
        let activeFilters = new Set();
        let activeWordFilter = null;
        let currentModalType = null;
        let currentAnnotationIndex = null;

        // Parole comuni da escludere dall'analisi
        const stopWords = new Set([
            'il', 'lo', 'la', 'le', 'gli', 'i', 'un', 'una', 'uno', 'del', 'della', 'dello', 'delle', 'degli', 'dei',
            'al', 'allo', 'alla', 'alle', 'agli', 'ai', 'dal', 'dallo', 'dalla', 'dalle', 'dagli', 'dai',
            'nel', 'nello', 'nella', 'nelle', 'negli', 'nei', 'sul', 'sullo', 'sulla', 'sulle', 'sugli', 'sui',
            'per', 'tra', 'fra', 'con', 'su', 'in', 'di', 'a', 'da', 'come', 'più', 'ma', 'se', 'non', 'che',
            'è', 'ha', 'ho', 'hai', 'hanno', 'abbiamo', 'avete', 'sono', 'sei', 'siamo', 'siete', 'era', 'erano',
            'sarà', 'saranno', 'essere', 'avere', 'fare', 'dire', 'andare', 'venire', 'stare', 'dare', 'vedere',
            'quando', 'dove', 'come', 'perché', 'mentre', 'dopo', 'prima', 'durante', 'dentro', 'fuori', 'sopra',
            'sotto', 'tutto', 'tutti', 'tutte', 'niente', 'nulla', 'qualche', 'alcuni', 'alcune', 'ogni', 'altro',
            'altra', 'altri', 'altre', 'stesso', 'stessa', 'stessi', 'stesse', 'questo', 'questa', 'questi', 'queste',
            'quello', 'quella', 'quelli', 'quelle', 'qui', 'qua', 'lì', 'là', 'ci', 'vi', 'ne', 'si', 'lo', 'la',
            'li', 'le', 'mi', 'ti', 'gli', 'le', 'ci', 'vi', 'si', 'me', 'te', 'lui', 'lei', 'noi', 'voi', 'loro',
            'mio', 'mia', 'miei', 'mie', 'tuo', 'tua', 'tuoi', 'tue', 'suo', 'sua', 'suoi', 'sue', 'nostro', 'nostra',
            'nostri', 'nostre', 'vostro', 'vostra', 'vostri', 'vostre', 'loro', 'anche', 'ancora', 'già', 'mai',
            'sempre', 'spesso', 'poco', 'molto', 'tanto', 'troppo', 'abbastanza', 'piuttosto', 'così', 'sì', 'no',
            'forse', 'però', 'quindi', 'allora', 'infatti', 'inoltre', 'comunque', 'tuttavia', 'invece', 'piuttosto'
        ]);

        // Colori predefiniti con nomi
        const colorMap = {
            '#7cc6f7': { name: 'Azzurro', icon: 'fas fa-lightbulb' },
            '#f77c7c': { name: 'Rosa', icon: 'fas fa-heart' },
            '#b699ff': { name: 'Viola', icon: 'fas fa-star' },
            '#ffd93d': { name: 'Giallo', icon: 'fas fa-sun' },
            '#6dd47e': { name: 'Verde', icon: 'fas fa-leaf' },
            '#ff9f43': { name: 'Arancione', icon: 'fas fa-fire' }
        };

        // Funzioni per la persistenza dei dati
        function saveData() {
            // Simula il salvataggio dei dati
            // In un ambiente reale, useresti localStorage:
            // localStorage.setItem('booksData', JSON.stringify(books));
            console.log('Dati salvati:', books);
        }

        function loadData() {
            // Simula il caricamento dei dati
            // In un ambiente reale, useresti:
            // const saved = localStorage.getItem('booksData');
            // if (saved) books = JSON.parse(saved);
            console.log('Dati caricati');
        }

        function getTopWords(text) {
            const words = text.toLowerCase()
                .replace(/[^\w\sàèéìîíòóùú]/g, ' ')
                .split(/\s+/)
                .filter(word => word.length > 3 && !stopWords.has(word));
            
            const wordCount = {};
            words.forEach(word => {
                wordCount[word] = (wordCount[word] || 0) + 1;
            });
            
            return Object.entries(wordCount)
                .sort((a, b) => b[1] - a[1])
                .slice(0, 10)
                .map(([word, count]) => ({ word, count }));
        }

        document.getElementById('file-input').addEventListener('change', handleFileUpload);

        function handleFileUpload(event) {
            const files = event.target.files;
            
            for (let file of files) {
                if (file.type === 'text/html') {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        parseHTMLFile(e.target.result, file.name);
                    };
                    reader.readAsText(file);
                }
            }
            
            event.target.value = '';
        }

        function parseHTMLFile(htmlContent, filename) {
            const parser = new DOMParser();
            const doc = parser.parseFromString(htmlContent, 'text/html');
            
            const title = doc.querySelector('h1')?.textContent || filename.replace('.html', '');
            const annotations = doc.querySelectorAll('.annotation');
            
            const bookData = {
                id: Date.now() + Math.random(),
                title: title,
                author: '', // Campo autore inizialmente vuoto
                filename: filename,
                annotations: [],
                colors: new Set(),
                topWords: [],
                generalNote: '', // Nota generale del libro
                userNotes: {} // Note aggiuntive per ogni annotazione
            };

            let allText = '';
            let currentNote = null;

            const allElements = doc.body.querySelectorAll('*');
            
            for (let i = 0; i < allElements.length; i++) {
                const element = allElements[i];
                
                if (element.classList.contains('annotation')) {
                    if (currentNote) {
                        if (bookData.annotations.length > 0) {
                            bookData.annotations[bookData.annotations.length - 1].note = currentNote;
                        }
                        currentNote = null;
                    }
                    
                    const colorDiv = element.querySelector('.color');
                    const titleDiv = element.querySelector('.title');
                    const highlightDiv = element.querySelector('.highlight');
                    
                    if (colorDiv && titleDiv && highlightDiv) {
                        const color = colorDiv.style.backgroundColor;
                        const highlightText = highlightDiv.textContent;
                        
                        const annotationData = {
                            color: color,
                            title: titleDiv.textContent,
                            highlight: highlightText,
                            note: null
                        };
                        
                        bookData.annotations.push(annotationData);
                        bookData.colors.add(color);
                        allText += ' ' + highlightText;
                    }
                } else if (element.classList.contains('notelabel')) {
                    let nextElement = element.nextElementSibling;
                    while (nextElement && !nextElement.classList.contains('note')) {
                        nextElement = nextElement.nextElementSibling;
                    }
                    
                    if (nextElement && nextElement.classList.contains('note')) {
                        currentNote = nextElement.textContent;
                        allText += ' ' + currentNote;
                    }
                }
            }
            
            if (currentNote && bookData.annotations.length > 0) {
                bookData.annotations[bookData.annotations.length - 1].note = currentNote;
            }

            bookData.topWords = getTopWords(allText);

            books.push(bookData);
            saveData(); // Salva i dati
            updateBooksDisplay();
            showNotification(`"${title}" caricato con successo!`);
        }

        function updateBooksDisplay() {
            const booksGrid = document.getElementById('books-grid');
            const emptyState = document.getElementById('empty-state');
            
            if (books.length === 0) {
                emptyState.style.display = 'block';
                booksGrid.style.display = 'none';
                return;
            }
            
            emptyState.style.display = 'none';
            booksGrid.style.display = 'grid';
            
            booksGrid.innerHTML = books.map(book => `
                <div class="book-card" onclick="showBookDetail('${book.id}')">
                    <div class="book-title">${book.title}</div>
                    ${book.author ? `<div class="book-author">di ${book.author}</div>` : ''}
                    <div class="color-indicators">
                        ${Array.from(book.colors).map(color => 
                            `<div class="color-dot" style="background-color: ${color}"></div>`
                        ).join('')}
                    </div>
                    <div class="book-stats">
                        <span><i class="fas fa-bookmark"></i> ${book.annotations.length} annotazioni</span>
                        <span><i class="fas fa-palette"></i> ${book.colors.size} colori</span>
                    </div>
                </div>
            `).join('');
        }

        function showBookDetail(bookId) {
            currentBook = books.find(book => book.id == bookId);
            if (!currentBook) return;

            document.getElementById('books-view').style.display = 'none';
            document.getElementById('book-detail').style.display = 'block';

            document.getElementById('detail-title').textContent = currentBook.title;
            
            // Mostra l'autore se presente, altrimenti mostra il campo per inserirlo
            const authorElement = document.getElementById('detail-author');
            const authorInputSection = document.getElementById('author-input-section');
            
            if (currentBook.author) {
                authorElement.innerHTML = `<div style="font-style: italic; margin-top: 5px;">di ${currentBook.author}</div>`;
                authorInputSection.style.display = 'none';
            } else {
                authorElement.innerHTML = `<button onclick="showAuthorInput()" style="background: rgba(255,255,255,0.2); border: none; color: white; padding: 5px 10px; border-radius: 15px; cursor: pointer; font-size: 0.9em; margin-top: 5px;"><i class="fas fa-plus"></i> Aggiungi Autore</button>`;
                authorInputSection.style.display = 'none';
            }

            document.getElementById('detail-stats').innerHTML = `
                <div style="margin-top: 10px; font-size: 0.9em; opacity: 0.9;">
                    <i class="fas fa-bookmark"></i> ${currentBook.annotations.length} annotazioni • 
                    <i class="fas fa-palette"></i> ${currentBook.colors.size} colori
                </div>
            `;

            // Mostra la nota generale se presente
            displayGeneralNote();

            // Mostra i filtri colore
            displayColorFilters();
            
            // Mostra le annotazioni
            displayAnnotations();
        }

        function showAuthorInput() {
            document.getElementById('author-input-section').style.display = 'block';
            document.getElementById('author-input').focus();
        }

        function saveAuthor() {
            const authorInput = document.getElementById('author-input');
            const authorName = authorInput.value.trim();
            
            if (authorName) {
                currentBook.author = authorName;
                saveData();
                
                // Aggiorna la visualizzazione
                const authorElement = document.getElementById('detail-author');
                authorElement.innerHTML = `<div style="font-style: italic; margin-top: 5px;">di ${authorName}</div>`;
                document.getElementById('author-input-section').style.display = 'none';
                
                // Aggiorna anche la vista libri
                updateBooksDisplay();
                
                showNotification('Autore salvato con successo!');
            }
        }

        function displayGeneralNote() {
            const generalNoteSection = document.getElementById('general-note-section');
            
            if (currentBook.generalNote && currentBook.generalNote.trim()) {
                generalNoteSection.innerHTML = `
                    <div class="general-note-section">
                        <div class="general-note-header">
                            <div class="general-note-title">
                                <i class="fas fa-sticky-note"></i>
                                Nota Generale
                            </div>
                            <button class="add-note-btn" onclick="editGeneralNote()">
                                <i class="fas fa-edit"></i> Modifica
                            </button>
                        </div>
                        <div class="general-note-content">${currentBook.generalNote}</div>
                    </div>
                `;
            } else {
                generalNoteSection.innerHTML = '';
            }
        }

        function showAddGeneralNoteModal() {
            currentModalType = 'general';
            document.getElementById('modal-title').textContent = currentBook.generalNote ? 'Modifica Nota Generale' : 'Aggiungi Nota Generale';
            document.getElementById('modal-textarea').value = currentBook.generalNote || '';
            document.getElementById('modal-overlay').style.display = 'flex';
            document.getElementById('modal-textarea').focus();
        }

        function editGeneralNote() {
            showAddGeneralNoteModal();
        }

        function displayColorFilters() {
            const filtersContainer = document.getElementById('color-filters');
            const colors = Array.from(currentBook.colors);
            
            let filtersHTML = `
                <button class="filter-btn ${activeFilters.size === 0 ? 'active' : ''}" 
                        onclick="clearFilters()" 
                        style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white;">
                    <i class="fas fa-eye"></i> Tutti (${currentBook.annotations.length})
                </button>
            `;
            
            colors.forEach(color => {
                const colorInfo = colorMap[color] || { name: 'Personalizzato', icon: 'fas fa-circle' };
                const count = currentBook.annotations.filter(ann => ann.color === color).length;
                const isActive = activeFilters.has(color);
                
                filtersHTML += `
                    <button class="filter-btn ${isActive ? 'active' : ''}" 
                            onclick="toggleColorFilter('${color}')"
                            style="background: ${color}; color: ${color === '#ffd93d' ? '#333' : 'white'};">
                        <i class="${colorInfo.icon}"></i> ${colorInfo.name} (${count})
                    </button>
                `;
            });

            // Aggiungi filtro per parole chiave
            if (currentBook.topWords && currentBook.topWords.length > 0) {
                filtersHTML += `<div style="width: 100%; margin: 10px 0; border-top: 1px solid #ddd;"></div>`;
                
                currentBook.topWords.slice(0, 5).forEach(wordObj => {
                    const isActive = activeWordFilter === wordObj.word;
                    filtersHTML += `
                        <button class="filter-btn ${isActive ? 'active' : ''}" 
                                onclick="toggleWordFilter('${wordObj.word}')"
                                style="background: ${isActive ? '#4facfe' : '#f0f0f0'}; color: ${isActive ? 'white' : '#333'};">
                            <i class="fas fa-search"></i> ${wordObj.word} (${wordObj.count})
                        </button>
                    `;
                });
            }

            filtersContainer.innerHTML = filtersHTML;
        }

        function clearFilters() {
            activeFilters.clear();
            activeWordFilter = null;
            displayColorFilters();
            displayAnnotations();
        }

        function toggleColorFilter(color) {
            if (activeFilters.has(color)) {
                activeFilters.delete(color);
            } else {
                activeFilters.add(color);
            }
            activeWordFilter = null;
            displayColorFilters();
            displayAnnotations();
        }

        function toggleWordFilter(word) {
            if (activeWordFilter === word) {
                activeWordFilter = null;
            } else {
                activeWordFilter = word;
                activeFilters.clear();
            }
            displayColorFilters();
            displayAnnotations();
        }

        function displayAnnotations() {
            const container = document.getElementById('annotations-container');
            let filteredAnnotations = currentBook.annotations;

            // Applica filtri colore
            if (activeFilters.size > 0) {
                filteredAnnotations = filteredAnnotations.filter(ann => activeFilters.has(ann.color));
            }

            // Applica filtro parola
            if (activeWordFilter) {
                filteredAnnotations = filteredAnnotations.filter(ann => {
                    const text = (ann.highlight + ' ' + (ann.note || '')).toLowerCase();
                    return text.includes(activeWordFilter.toLowerCase());
                });
            }

            if (filteredAnnotations.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-filter"></i>
                        <h3>Nessuna annotazione trovata</h3>
                        <p>Prova a modificare i filtri per vedere più risultati</p>
                    </div>
                `;
                return;
            }

            container.innerHTML = filteredAnnotations.map((annotation, index) => {
                const colorInfo = colorMap[annotation.color] || { name: 'Personalizzato', icon: 'fas fa-circle' };
                const originalIndex = currentBook.annotations.indexOf(annotation);
                const userNote = currentBook.userNotes[originalIndex];
                
                return `
                    <div class="annotation" style="border-left-color: ${annotation.color};">
                        <div class="annotation-header">
                            <div class="annotation-title">
                                <i class="${colorInfo.icon}" style="color: ${annotation.color}; margin-right: 8px;"></i>
                                ${annotation.title}
                            </div>
                            <button class="add-note-btn" onclick="showAddUserNoteModal(${originalIndex})">
                                <i class="fas fa-plus"></i> Aggiungi Nota
                            </button>
                        </div>
                        
                        <div class="highlight">${annotation.highlight}</div>
                        
                        ${annotation.note ? `
                            <div class="note">
                                <div class="note-label">
                                    <i class="fas fa-quote-left"></i>
                                    Nota originale
                                </div>
                                <div class="note-content">${annotation.note}</div>
                            </div>
                        ` : ''}
                        
                        ${userNote ? `
                            <div class="user-note">
                                <div class="user-note-header" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
                                    <div class="user-note-label">
                                        <i class="fas fa-user-edit"></i>
                                        La mia nota
                                    </div>
                                    <button class="add-note-btn" onclick="editUserNote(${originalIndex})" style="font-size: 0.8em; padding: 4px 8px;">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                </div>
                                <div class="user-note-content">${userNote}</div>
                            </div>
                        ` : ''}
                    </div>
                `;
            }).join('');
        }

        function showAddUserNoteModal(annotationIndex) {
            currentModalType = 'user';
            currentAnnotationIndex = annotationIndex;
            const existingNote = currentBook.userNotes[annotationIndex] || '';
            
            document.getElementById('modal-title').textContent = existingNote ? 'Modifica La Mia Nota' : 'Aggiungi La Mia Nota';
            document.getElementById('modal-textarea').value = existingNote;
            document.getElementById('modal-overlay').style.display = 'flex';
            document.getElementById('modal-textarea').focus();
        }

        function editUserNote(annotationIndex) {
            showAddUserNoteModal(annotationIndex);
        }

        function saveNote() {
            const noteContent = document.getElementById('modal-textarea').value.trim();
            
            if (!noteContent) {
                closeModal();
                return;
            }

            if (currentModalType === 'general') {
                currentBook.generalNote = noteContent;
                displayGeneralNote();
                showNotification('Nota generale salvata!');
            } else if (currentModalType === 'user' && currentAnnotationIndex !== null) {
                currentBook.userNotes[currentAnnotationIndex] = noteContent;
                displayAnnotations();
                showNotification('Nota personale salvata!');
            }

            saveData();
            closeModal();
        }

        function closeModal() {
            document.getElementById('modal-overlay').style.display = 'none';
            document.getElementById('modal-textarea').value = '';
            currentModalType = null;
            currentAnnotationIndex = null;
        }

        function showBooksView() {
            document.getElementById('book-detail').style.display = 'none';
            document.getElementById('books-view').style.display = 'block';
            currentBook = null;
            activeFilters.clear();
            activeWordFilter = null;
        }

        function showNotification(message) {
            // Crea una notifica temporanea
            const notification = document.createElement('div');
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
                color: white;
                padding: 15px 20px;
                border-radius: 10px;
                box-shadow: 0 10px 30px rgba(0,0,0,0.2);
                z-index: 10000;
                animation: slideIn 0.3s ease;
                font-weight: 500;
            `;
            notification.textContent = message;
            
            // Aggiungi l'animazione CSS
            if (!document.querySelector('#notification-style')) {
                const style = document.createElement('style');
                style.id = 'notification-style';
                style.textContent = `
                    @keyframes slideIn {
                        from { transform: translateX(100%); opacity: 0; }
                        to { transform: translateX(0); opacity: 1; }
                    }
                    @keyframes slideOut {
                        from { transform: translateX(0); opacity: 1; }
                        to { transform: translateX(100%); opacity: 0; }
                    }
                `;
                document.head.appendChild(style);
            }
            
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.style.animation = 'slideOut 0.3s ease';
                setTimeout(() => {
                    if (notification.parentNode) {
                        notification.parentNode.removeChild(notification);
                    }
                }, 300);
            }, 3000);
        }

        // Gestione eventi modal
        document.getElementById('modal-overlay').addEventListener('click', function(e) {
            if (e.target === this) {
                closeModal();
            }
        });

        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape' && document.getElementById('modal-overlay').style.display === 'flex') {
                closeModal();
            }
        });

        // Gestione input autore con Enter
        document.getElementById('author-input').addEventListener('keydown', function(e) {
            if (e.key === 'Enter') {
                saveAuthor();
            }
        });

        // Inizializzazione
        document.addEventListener('DOMContentLoaded', function() {
            loadData();
            updateBooksDisplay();
        });

        // Gestione del beforeunload per salvare i dati prima di chiudere la pagina
        window.addEventListener('beforeunload', function() {
            saveData();
        });

        // Salvataggio periodico ogni 30 secondi
        setInterval(saveData, 30000);
    </script>
</body>
</html>
